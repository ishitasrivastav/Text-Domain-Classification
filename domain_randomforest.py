# -*- coding: utf-8 -*-
"""domain_RandomForest

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L_vFn1dPfgiztdfUGpPJ5hVkWlISk1yO
"""

import re
import nltk
import pandas as pd
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

df = pd.read_csv('/content/domain_data.csv')

# Preprocessing
# Lowercasing
df['text'] = df['text'].apply(lambda x: x.lower())

# Removing Punctuation
df['text'] = df['text'].apply(lambda x: re.sub(r'[^\w\s]', '', x))

# Tokenization
nltk.download('punkt')
df['text'] = df['text'].apply(lambda x: word_tokenize(x))

# Removing Stopwords
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))
df['text'] = df['text'].apply(lambda x: [word for word in x if word not in stop_words])

# Joining tokens back into sentences (optional, depending on your preference)
df['text'] = df['text'].apply(lambda x: ' '.join(x))

df = df[['text', 'labels']]
df.columns = ['text', 'domain']

# Encode labels
label_dict = {'business': 0, 'entertainment': 1, 'politics': 2, 'sport': 3, 'tech': 4}
df['domain'] = df['domain'].map(label_dict)

# Feature extraction
tfidf_vectorizer = TfidfVectorizer()
X = tfidf_vectorizer.fit_transform(df['text'])
y = df['domain']

# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training (using Random Forest)
model = RandomForestClassifier(n_estimators=100, random_state=42)  # You can adjust n_estimators as needed
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, target_names=label_dict.keys()))

# Prediction (example)
new_text = ["A new gadget was launched yesterday."]
new_text_features = tfidf_vectorizer.transform(new_text)
predicted_label = model.predict(new_text_features)
print("Predicted domain:", list(label_dict.keys())[predicted_label[0]])

